syntax = "proto3";

package graviton.graph;

// Object represents an object in the social graph.
message Object {
  int64 id = 1; // Unique identifier for the object.
  int64 shard_id = 2; // Shard ID where the object is hosted.
  string type = 3; // Type of the object.
  map<string, string> data = 4; // Data associated with the object.
}

// Association represents a connection between two objects in the social graph.
message Association {
  int64 id1 = 1; // ID of the source object.
  int64 id2 = 2; // ID of the destination object.
  string type = 3; // Type of the association.
  int32 time = 4; // Time of the association.
  map<string, string> data = 5; // Data associated with the association.
}

// Service for managing objects and associations in the social graph.
service GraphService {
  // Object API
  rpc CreateObject(CreateObjectRequest) returns (Object) {}
  rpc GetObject(GetObjectRequest) returns (Object) {}
  rpc UpdateObject(UpdateObjectRequest) returns (Object) {}
  rpc DeleteObject(DeleteObjectRequest) returns (Object) {}

  // Association API
  rpc AddAssociation(AddAssociationRequest) returns (Association) {}
  rpc DeleteAssociation(DeleteAssociationRequest) returns (Association) {}
  rpc ChangeAssociationType(ChangeAssociationTypeRequest) returns (Association) {}

  // Association Query API
  rpc GetAssociations(GetAssociationsRequest) returns (GetAssociationsResponse) {}
  rpc CountAssociations(CountAssociationsRequest) returns (CountAssociationsResponse) {}
  rpc RangeAssociations(RangeAssociationsRequest) returns (RangeAssociationsResponse) {}
  rpc TimeRangeAssociations(TimeRangeAssociationsRequest) returns (TimeRangeAssociationsResponse) {}
}

// Request and response messages for the APIs.

// Object API
message CreateObjectRequest {
  Object object = 1; // Object to be created.
}

message GetObjectRequest {
  int64 id = 1; // ID of the object to get.
}

message UpdateObjectRequest {
  Object object = 1; // Object to be updated.
}

message DeleteObjectRequest {
  int64 id = 1; // ID of the object to delete.
}

// Association API
message AddAssociationRequest {
  Association association = 1; // Association to be added.
}

message DeleteAssociationRequest {
  int64 id1 = 1; // ID of the source object.
  int64 id2 = 2; // ID of the destination object.
  string type = 3; // Type of the association.
}

message ChangeAssociationTypeRequest {
  int64 id1 = 1; // ID of the source object.
  int64 id2 = 2; // ID of the destination object.
  string oldType = 3; // Old type of the association.
  string newType = 4; // New type of the association.
}

// Association Query API
message GetAssociationsRequest {
  int64 id1 = 1; // ID of the source object.
  string atype = 2; // Type of associations to query.
  repeated int64 id2set = 3; // Set of destination object IDs.
  int32 high = 4; // High time range (optional).
  int32 low = 5; //Low time range (optional).
}

message GetAssociationsResponse {
  repeated Association associations = 1; // List of associations for the queried object.
}

message CountAssociationsRequest {
  int64 id1 = 1; // ID of the source object.
  string atype = 2; // Type of associations to count.
}

message CountAssociationsResponse {
  int32 count = 1; // Count of associations.
}

message RangeAssociationsRequest {
  int64 id1 = 1; // ID of the source object.
  string atype = 2; // Type of associations to range.
  int32 pos = 3; // Position to start from.
  int32 limit = 4; // Limit of associations to return.
}

message RangeAssociationsResponse {
  repeated Association associations = 1; // List of associations for the queried object.
}

message TimeRangeAssociationsRequest {
  int64 id1 = 1; // ID of the source object.
  string atype = 2; // Type of associations to range.
  int32 high = 3; // High time range.
  int32 low = 4; // Low time range.
  int32 limit = 5; // Limit of associations to return.
}

message TimeRangeAssociationsResponse {
  repeated Association associations = 1; // List of associations for the queried object.
}